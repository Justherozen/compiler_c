string class[100];
string leading_course[100];
string l_list[100];
string acc_course[100];
string nullstr;
int credit[100];
int grade[100];
int has_grade[100];
int is_f[100];
int is_learned[100];
int c_length[100];
int line;


int strcmp(string a,string b){
    char c;
    char d;
    int i;
    i = 0;
    while(i<20){
        c = a[i];
        d = b[i];
        if(c!=d){
            return 1;
        }
        i = i+1;
    }
    return 0;
}

int str_find(string f){
    string g;
    int adder;
    adder = 0;
    while(adder<line){
        g = class[adder];
        if(strcmp(g,f)==0 && is_learned[adder]==1){
            return adder;
        }
        adder = adder +1;
    }
    return 200;
}

int main()
{
    int testint;
   string tmp;
   string tmp_class;
   string tmp_lc;
   char sep;
   char base;
   char tmpchar;
   char newline;
   int flag1;
   int flag2;
   int flag3;
   int cnt1;
   int cnt2;
   int cnt3;
   int cnt4;
   int cnt5;
   int cnt6;
   int part;
   int index;
   int total_credit;
   int done_credit;
   int try_credit;
   int total_grade;
   int tmp_credit;
   int remain_credit;
   float avg_grade;
   string outl1;
   string outl2;
   string outl3;
   string outl4;
   string outl5;
   string outl6;
   string outl7;
   string outl8;
   string newnew;
   newnew="hhhhh";
   outl1="GPA: ";
   outl2="Hours Attempted: ";
   outl3="Hours Completed: ";
   outl4="Credits Remaining: ";
   outl5="";
   outl6="Possible Courses to Take Next";
   outl7="  ";
   outl8="  None - Congratulations!";
   total_credit = 0;
   try_credit = 0;
   total_grade = 0;
   done_credit = 0;
   remain_credit = 0;
   nullstr="";

   base = '0';
   cnt1 = 0;
   cnt2 = 0;
   cnt3 = 0;
   part = 3;
   line = 0;
   flag1 = 0;
   flag2 = 0;
   newline='\n';
   scanf(tmpchar);

    while(tmpchar != newline){     
        scanfstring(tmp);
        tmp_class[cnt2] = tmpchar;
        cnt2 = cnt2 + 1;
        sep = tmp[cnt1];
        if(part==3 && sep =='|'){
            class[line] = tmp_class;
            tmp_class="";
            part=part-1;
            cnt2=0;
            
        }
        if(part == 3 && sep!='|'){
            while(sep!='|'){
                tmp_class[cnt2] = sep;
                cnt2 = cnt2 + 1;
                cnt1 = cnt1 + 1;
                sep = tmp[cnt1];
            }
            part = part-1;
            class[line] = tmp_class;
            cnt2 = 0;
            tmp_class = ""; 
        }
        if(part == 2 && sep =='|'){
            cnt1 = cnt1+1;
            sep = tmp[cnt1];
            tmp_credit = sep - base;
            credit[line] = tmp_credit;
            cnt1 = cnt1 + 1;
            part = part - 1;
            cnt1 = cnt1 + 1;
            sep = tmp[cnt1];
        }
        if(part == 1 && sep!='|'){
            while(sep!='|'){
                tmp_lc[cnt2] = sep;
                cnt2 = cnt2 + 1;
                cnt1 = cnt1 + 1;
                sep = tmp[cnt1];
            }
            part = part-1;
            leading_course[line] = tmp_lc;
            c_length[line] = cnt2;
            cnt2 = 0;
            tmp_lc = "";
        }
        else if(part == 1 && sep =='|'){
                tmp_lc = "";
                leading_course[line] = tmp_lc;
                c_length[line] = 0;
                part = part-1;
        }
        if(part == 0 && sep =='|'){
            cnt1 = cnt1 + 1;
            sep = tmp[cnt1];
            if(sep == 'A'){
                grade[line] = 4;
                is_f[line] = 0;
                has_grade[line] = 1;
                is_learned[line] = 1;
            }
            else if(sep == 'B'){
                grade[line] = 3;
                is_f[line] = 0;
                has_grade[line] = 1;
                is_learned[line] = 1;
            }
            else if(sep == 'C'){
                grade[line] = 2;
                is_f[line] = 0;
                has_grade[line] = 1;
                is_learned[line] = 1;
            }
            else if(sep == 'D'){
                grade[line] = 1;
                is_f[line] = 0;
                has_grade[line] = 1;
                is_learned[line] = 1;
            }
            else if(sep == 'F'){
                grade[line] = 0;
                is_f[line] = 1;
                has_grade[line] = 1;
                is_learned[line] = 0;
            }
            else{
                grade[line] = 0;
                is_f[line] = 0;
                has_grade[line] = 0;
                is_learned[line] = 0;
            }
            cnt1 = 0;
        }
        line = line + 1;
        tmp = "";
        part = 3;
        scanf(newline);
        scanf(tmpchar);
    }  
    while(cnt1 < line){
        if(has_grade[cnt1]==1 && is_f[cnt1]==0){
            try_credit = try_credit + credit[cnt1];
            total_credit = total_credit + credit[cnt1];
            done_credit = done_credit + credit[cnt1];
            total_grade = total_grade + credit[cnt1]*grade[cnt1];
        }
        else if(has_grade[cnt1]==1 && is_f[cnt1]==1){
            total_credit = total_credit + credit[cnt1];
            try_credit = try_credit + credit[cnt1];
        }
        else{
            total_credit = total_credit + credit[cnt1];
        }
        cnt1 = cnt1 + 1;
    }    
    cnt1 = 0;
    cnt2 = 0;
    cnt3 = 0;
    cnt4 = 0;
    cnt5 = 0;
    cnt6 = 0;
    flag1 = 1;
    flag2 = 1;

    if(total_grade == 0){
        avg_grade = 0.0;
    }
    else{
        avg_grade = total_grade / try_credit;
    }
    remain_credit = total_credit -done_credit;

    while(cnt1 < line){
        if(is_learned[cnt1]==0){
            if(c_length[cnt1]==0){
                tmp_lc = class[cnt1];
                acc_course[cnt5] = tmp_lc;
                tmp_lc = "";
                cnt5 = cnt5 + 1;
            }
            else{
                tmp = leading_course[cnt1];
                sep = tmp[cnt2];
                
                while(cnt2 < c_length[cnt1] && flag2 == 1){    
                    while(sep!=';' && cnt2 < c_length[cnt1]){
                        while(sep!=';' && sep!=',' && cnt2 < c_length[cnt1]){  
                            tmp_class[cnt3] = sep;
                            cnt3 = cnt3 + 1;
                            cnt2 = cnt2 + 1;
                            sep = tmp[cnt2];
                        }
                        l_list[cnt4] = tmp_class;
                        cnt4 = cnt4 +1;
                        tmp_class = "";
                        cnt3 = 0;
                        if(sep == ','){
                            cnt2 = cnt2 + 1;
                        }
                        sep = tmp[cnt2];
                    }
                    while(cnt6 < cnt4 && flag1 == 1){
                        tmp_class = l_list[cnt6];
                       
                        
                        index = str_find(tmp_class);

                        if(index == 200){
                            flag1 = 0;
                        }
                        cnt6 = cnt6 + 1;
                    }
                   
                    tmp_class = "";
                    if(flag1 == 1){
                        flag2 = 0;
                    }
                    else{
                        flag1=1;
                    }
                    cnt6 = 0;
                    cnt4 = 0;
                    if(sep == ';'){
                        cnt2 = cnt2 + 1;
                    }
                    sep = tmp[cnt2];
                }
                if(flag2 == 0){
                    tmp_lc = class[cnt1];
                    acc_course[cnt5] = tmp_lc;
                    tmp_lc = "";
                    cnt5 = cnt5 + 1;
                }
                flag1 = 1;
                flag2 = 1;
                cnt2 = 0;
            }
        }
        cnt1 = cnt1+1;
    }
    cnt1 = 0;
    printstringsameline(outl1);
    printf(avg_grade);
    printstringsameline(outl2);
    printf(try_credit);
    printstringsameline(outl3);
    printf(done_credit);
    printstringsameline(outl4);
    printf(remain_credit);
    printstring(outl5);
    printstring(outl6); 
    if(total_credit==done_credit){
        printstring(outl8);
    }
    if(total_credit!=done_credit){
    while(cnt1<cnt5){
        tmp = acc_course[cnt1];
        printstringsameline(outl7);
        printstring(tmp);
        cnt1 = cnt1 + 1; 
    }    
    }
   
    return 0;
}
